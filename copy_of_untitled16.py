# -*- coding: utf-8 -*-
"""Copy of Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fKNcIXY00MXzvs3UpsFWDTrzvyVCtcHr
"""

!pip install opencv-python
!pip install pytesseract

!git clone https://github.com/kennethleungty/Car-Plate-Detection-OpenCV-TesseractOCR

# Commented out IPython magic to ensure Python compatibility.
# Import dependencies
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import cv2 # This is the OpenCV Python library
import pytesseract # This is the TesseractOCR Python library

def enlarge_plt_display(image, scale_factor):
    width = int(image.shape[1] * scale_factor / 100)
    height = int(image.shape[0] * scale_factor / 100)
    dim = (width, height)
    plt.figure(figsize = dim)
    plt.axis('off') 
    plt.imshow(image)

# Read car image and convert color to RGB
carplate_img = cv2.imread('/content/car.jpg')
carplate_img_rgb = cv2.cvtColor(carplate_img, cv2.COLOR_BGR2RGB)
enlarge_plt_display(carplate_img_rgb, 1.2)

carplate_haar_cascade = cv2.CascadeClassifier('/content/Car-Plate-Detection-OpenCV-TesseractOCR/haar_cascades/haarcascade_russian_plate_number.xml')

# Setup function to detect car plate
def carplate_detect(image):
    carplate_overlay = image.copy() 
    carplate_rects = carplate_haar_cascade.detectMultiScale(carplate_overlay,scaleFactor=1.1, minNeighbors=5)
    for x,y,w,h in carplate_rects:   
       cv2.rectangle(carplate_overlay, (x,y), (x+w,y+h), (255,0,0), 5) 
    return carplate_overlay

detected_carplate_img = carplate_detect(carplate_img_rgb)
enlarge_plt_display(detected_carplate_img, 1.2)

def carplate_extract(image):
    
    carplate_rects = carplate_haar_cascade.detectMultiScale(image,scaleFactor=1.1, minNeighbors=5) 

    for x,y,w,h in carplate_rects: 
        carplate_img = image[y+15:y+h-10 ,x+15:x+w-20] 
        
    return carplate_img

# Enlarge image for further image processing later on
def enlarge_img(image, scale_percent):
    width = int(image.shape[1] * scale_percent / 100)
    height = int(image.shape[0] * scale_percent / 100)
    dim = (width, height)
    resized_image = cv2.resize(image, dim, interpolation = cv2.INTER_AREA)
    return resized_image

# Display extracted car license plate image
carplate_extract_img = carplate_extract(carplate_img_rgb)
carplate_extract_img = enlarge_img(carplate_extract_img, 150)
plt.imshow(carplate_extract_img);

# Convert image to grayscale
carplate_extract_img_gray = cv2.cvtColor(carplate_extract_img, cv2.COLOR_RGB2GRAY)
plt.axis('off') 
plt.imshow(carplate_extract_img_gray, cmap = 'gray');